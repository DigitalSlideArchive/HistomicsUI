extends ./panel.pug

block title
  | #[span.icon-pencil] #{title} #[span.h-panel-name(title=name) #{name}]

block content
  .input-group.input-group-sm.h-style-group-row
    select.form-control.h-style-group
      each group in groups.sortBy('id')
        option(value=group.id, selected=group.id === style)
          = group.id
    .input-group-btn
      button.btn.btn-default.h-configure-style-group(type='button')
        span.icon-cog(title='Configure style group. Keyboard shortcuts: "q" and "w" to select next and previous style group, respectively')
  .btn-group.btn-justified.btn-group-sm.h-draw-tools
    .btn-group.btn-group-sm
      button.h-draw.btn.btn-default(
        type='button', data-type='point', title='Draw a new point (keyboard shortcut: o)', class=drawingType === 'point' ? 'active' : null)
        | #[span.icon-circle]Point
    .btn-group.btn-group-sm
      button.h-draw.btn.btn-default(
        type='button', data-type='rectangle', title='Draw a new rectangle (keyboard shortcut: r)', class=drawingType === 'rectangle' ? 'active' : null)
        | #[span.icon-check-empty]Rectangle
      button.btn.btn-default.h-dropdown-title.h-brush-dropdown(type='button', data-target='#h-fixed-shape-controls')
        i.icon-down-open
      .h-fixed-shape-controls.h-dropdown-content.collapse
        .form-group.h-fixed-shape-form-group.input-sm
          label.radio
            input.h-fixed-shape(type="radio", name="h-fixed-shape", mode="unconstrained")
            | Unconstrained
          label.radio
            input.h-fixed-shape(type="radio", name="h-fixed-shape", mode="fixed_aspect_ratio")
            | Fixed Aspect Ratio
          label.radio
            input.h-fixed-shape(type="radio", name="h-fixed-shape", mode="fixed_size")
            | Fixed Size
        .form-group.h-fixed-shape-form-group.h-fixed-values.input-sm
          label
            | Width
            input.h-fixed-width(type="number", min="1", value=opts.fixed_width)
          label
            | Height
            input.h-fixed-height(type="number", min="1", value=opts.fixed_height)
    .btn-group.btn-group-sm
      button.h-draw.btn.btn-default(
        type='button', data-type='ellipse', title='Draw a new ellipse (keyboard shortcut: i)', class=drawingType === 'ellipse' ? 'active' : null)
        | #[span.icon-circle-empty.flattenicon]Ellipse
      button.btn.btn-default.h-dropdown-title.h-brush-dropdown(type='button', data-target='#h-fixed-shape-controls')
        i.icon-down-open
      .h-fixed-shape-controls.h-dropdown-content.collapse
        .form-group.h-fixed-shape-form-group.input-sm
          label.radio
            input.h-fixed-shape(type="radio", name="h-fixed-shape", mode="unconstrained")
            | Unconstrained
          label.radio
            input.h-fixed-shape(type="radio", name="h-fixed-shape", mode="fixed_aspect_ratio")
            | Fixed Aspect Ratio
          label.radio
            input.h-fixed-shape(type="radio", name="h-fixed-shape", mode="fixed_size")
            | Fixed Size
        .form-group.h-fixed-shape-form-group.h-fixed-values.input-sm
          label
            | Width
            input.h-fixed-width(type="number", min="1", value=opts.fixed_width)
          label
            | Height
            input.h-fixed-height(type="number", min="1", value=opts.fixed_height)
    .btn-group.btn-group-sm
      button.h-draw.btn.btn-default(
        type='button', data-type='circle', title='Draw a new circle (keyboard shortcut: c)', class=drawingType === 'circle' ? 'active' : null)
        | #[span.icon-circle-empty]Circle
    .btn-group.btn-group-sm
      button.h-draw.btn.btn-default(
        type='button', data-type='polygon', title='Draw a new polygon (keyboard shortcut: p)', class=drawingType === 'polygon' ? 'active' : null)
        | #[span.icon-draw-polygon]Polygon
    .btn-group.btn-group-sm
      button.h-draw.btn.btn-default(
        type='button', data-type='line', title='Draw a new line (keyboard shortcut: l)', class=drawingType === 'line' ? 'active' : null)
        | #[span.icon-pencil]Line
    .btn-group.btn-group-sm
      button.h-draw.btn.btn-default(
        type='button', data-type='brush', title='Draw with a brush (keyboard shortcut: b)', class=drawingType === 'brush' ? 'active' : null, shape=opts.brush_shape)
        span.shape.square
          | #[span.icon-check-empty]
        span.shape.circle
          | #[span.icon-circle-empty]
        | Brush
      button.btn.btn-default.h-dropdown-title.h-brush-dropdown(type='button', data-target='#h-brush-controls')
        i.icon-down-open
      .h-brush-controls.h-dropdown-content.collapse
        .form-group.input-sm
          label.radio-inline
            input.h-brush-shape.h-brush-square(type="radio", name="h-brush-shape", checked=opts.brush_shape !== 'circle' ? 'checked' : undefined, shape="square", next_shape="circle")
            | Square
          label.radio-inline
            input.h-brush-shape.h-brush-circle(type="radio", name="h-brush-shape", checked=opts.brush_shape === 'circle' ? 'checked' : undefined, shape="circle", next_shape="square")
            | Circle
        .form-group.input-sm
          label
            | Size
            input.h-brush-size(type="number", min="1", value=opts.brush_size)
        .form-group.input-sm
          label(title="If checked, the size is in screen pixels.  If unchecked, the size is in base image pixels")
            input.h-brush-screen(type="checkbox", checked=opts.brush_screen ? 'checked' : undefined)
            | Screen
  .h-group-count
    if partialCount
      b.h-group-count-label(title='* These counts only apply to loaded elements') Count*:
    else
      b.h-group-count-label Count:
    span.h-group-count-options
  .h-elements-container
    include drawWidgetElement.pug
